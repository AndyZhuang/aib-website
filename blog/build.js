let _ = require('lodash')
let fs = require('fs')
let glob = require('glob')
let moment = require('moment')
let md = require('markdown-it')()
let toSlugCase = require('to-slug-case')
let toPascalCase = require('to-pascal-case')
let yaml = require('js-yaml')

let blogTitle = 'Cosmos Blog'

let postsDirectory = './blog/posts/'
let postsVueDirectory = './src/components/blog/'
let posts = glob.sync(postsDirectory + '*.md')

let staticRouterFile = './src/router/staticRouter.js'
let routerFile = './src/router/index.js'
let blogIndexFile = './src/components/pages/BlogIndex.vue'
let blogRssFile = './src/assets/feed.xml'

let vueTemplatePost = require('./vueTemplatePost.js')
let rssTemplate = require('./rssTemplate.js')

function markdownToObject (files) {
  let posts = []
  for (let i = 0; i < files.length; i++) {
    let post = {title: '', slug: '', author: '', date: '', body: ''}

    let data = fs.readFileSync(files[i], 'utf8')
    let metaData = yaml.load(data.split('---')[1])
    let markdownData = data.split('---')[2]

    // set the post metadata
    post.title = metaData.title
    post.slug = toSlugCase(metaData.title)
    post.author = metaData.author
    post.date = moment(metaData.date).valueOf() // ms since epoch
    post.excerpt = metaData.excerpt
    post.filename = post.slug + '.vue'
    post.filepath = postsVueDirectory + post.filename
    post.dateFriendly = moment(post.date, 'x').format('LL')
    post.body = md.render(markdownData)

    post.file = vueTemplatePost(post)

    posts.push(post)
  }
  // order posts by newest first
  posts = _.orderBy(posts, ['date'], ['desc'])
  return posts
}

function writePostsFiles (data) {
  for (let i = 0; i < data.length; i++) {
    let file = data[i].filepath
    let content = data[i].file
    fs.writeFileSync(file, content, 'utf8')
    console.log(`  ✓ ${file}`)
  }
}

function writePostsIndexFile (data) {
  let f = '<!--THIS FILE IS GENERATED BY `./blog/build.js` DO NOT EDIT HERE-->\n'
  f += '<template>\n'
  f += '  <div class="header-padding"></div>\n'
  f += '  <div class="article-wrapper" id="blog-index">\n'
  f += `    <h1>${blogTitle}</h1>\n`
  f += '    <div class="subtitle"><a href="/static/feed.xml">Subscribe</a> for the latest updates.</div>\n'
  for (let i = 0; i < data.length; i++) {
    f += `    <a class="article-link" v-link="{ path: '/blog/${data[i].slug}'}">\n`
    f += `      <div class="article-title">${data[i].title}</div>\n`
    f += `      <div class="article-excerpt">${data[i].excerpt}</div>\n`
    f += `      <div class="article-date">Posted on ${data[i].dateFriendly}</div>\n`
    f += '    </a>\n'
  } 
  f += '  </div><!--article-wrapper-->\n'
  f += '</template>\n'
  f += '<script>\n'
  f += 'export default {\n'
  f += '  head: {\n'
  f += '    title: {\n'
  f += '      inner: \'Blog\'\n'
  f += '    }\n'
  f += '  }\n'
  f += '}\n'
  f += '</script>\n'

  fs.writeFileSync(blogIndexFile, f, 'utf8')
  console.log(`  ✓ ${blogIndexFile}`)
}

function writeRoutesFile (data) {
  let staticRouter = fs.readFileSync(staticRouterFile, 'utf8')

  let file = '// THESE BLOG ROUTES ARE GENERATED BY `./blog/build.js` DO NOT EDIT HERE-->\n'
  for (let i = 0; i < data.length; i++) {
    let importStr = `import Blog${toPascalCase(data[i].title)}`
    let fromStr = ` from '../components/blog/${(data[i].filename)}'\n`
    file += importStr + fromStr
  }
  file += 'let blogRoutes = {\n'
  for (let i = 0; i < data.length; i++) {
    let routeKey = `  '/blog/${data[i].slug}': `
    let routeValue =  `{ component: Blog${toPascalCase(data[i].title)} }`
    let route = routeKey + routeValue
    if (i != data.length - 1) { route += ',' }
    route += '\n'
    file += route
  }
  file += '}\n\n'

  file += staticRouter

  fs.writeFileSync(routerFile, file, 'utf8')
  console.log(`  ✓ ${routerFile}\n`)
  console.log(`  ${blogTitle} built successfully.\n`)
}

function writeRssFile (data) {
  let rss = rssTemplate(data)
  fs.writeFileSync(blogRssFile, rss, 'utf8')

  console.log(`  ✓ ${blogRssFile}`)
}

let postData = markdownToObject(posts)
writePostsFiles(postData)
writePostsIndexFile(postData)
writeRssFile(postData)
writeRoutesFile(postData)
